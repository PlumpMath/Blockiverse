
@root common

@module chunk

    Chunk encoder/decoder
    
        Chunks encode a volumetric world in chunks of 16x16x256-unit sections.
        
        Zlib compression is used to reduce encoded data size.
        Lose the RLE stuff as I'm going to use zlib-compressed chunks.
        
        So far plan for a chunk is simply:
        [long32] biome designation (flagbits)
            ([blk:long16],[attr:long16])x256 (one vertical strip top-to-bottom Y 255..0)
                x16 one row (all strips along X -8..+7)
                x16 one chunk (all rows along Z -8..+7)
        
        So length is 4+((2+2)*256*16*16) = 262148 (or just over 256 KB)
        The chunks of a 16-chunk view distance would occupy about .197 GB
        16*16*pi (805) * 262148
        
        If chunks are stored as separate nodes (most logical choice) scale/translate/rotate
        are independent of other chunks so vertices may be reused since each chunk may use
        geometry centered on 0,0,0 then translated as necessary to chunk's acutal world
        position by the node.
        
        TODO: Investigate ways to reduce triangle load of loaded chunks.  Perhaps a viewpoint
        reference (player/viewe's location) point for line-of-sight culling of non-visible
        geometry by the chunk decoder?
        
        Chunks also contain a biome/generator system for generation of new chunks as a chunkoid is explored.
        The chunkoid's containing-quadrant's starsystem type will further affect biome resource generation.
        
        Chunks may be of arbitrary size (well it has an upper limit but is VERY large)
        
        Biome flags:
            Wet
                - High precip
            Arid
                - Low precip (both flags off = normal precip)
            Polar
                - Low temperature (snow/ice at surface)
            Hot
                - High temperature
            Humid
                - high air humidity
            River
                - river generated in biome
            Fertile
                - plants can grow
            Trees
                - trees can grow
            Mountanous
                - high mountain formations generated
            Hills
                - hilly terrain generated
            Coastal
                - ocean proximity
            Ocean
                - great blue yonder
            Waterbody
                - generate stationary water body (not rivers eg: lakes/ponds/marshes)
            Geothermal
                - high volcanic/igneous type content/thermals/etc
        
            Biome flags are combined to create specific biome types:
            
            Examples:
                Desert:
                    arid + hot
                Tropics:
                    humid + hot + fertile
                Rainforest:
                    humid & wet & fertile & trees
                Savannah:
                    arid + fertile
                dense forestation:
                    fertile & trees & !arid
                normal forestation:
                    trees & !arid
                low forestation
                    trees & arid
                no trees
                    arid & hot
                Extreme mountainous:
                    mountainous + hills
                Flatlands:
                    !mountainous & !hills
                Plains:
                    !mountains & !hills & fertile & !arid
                Marsh:
                    wet & humid & !fertile
                Swamp:
                    wet & humid & !fertile & waterbody
                Rapids/Waterfalls:
                    river & mountainous
                Valley:
                    river & hills
                Canyon:
                    river & hills & mountainous

@module quadrant

    Quadrant encoder/decoder
    
        Quadrants encode a 3D expanding universe of arbitrary objects by object identifiers
        optimized for sparsely populated data over very large areas.
        
        Identifiers reference either chunkoids (eg: planets) or other movable objects.
        
        Quadrant's parallel to chunkoid's biome attribute is its starsystem attribute.
        
        VOIDSPACE
            No stars in system meaning space debris is low quality smaller asteroid
            type masses.  Chunkoids have tiny maximum size and of very low resource value probability.
            Resources with type 'ejecta' (stuff spewed from some neighbouring system)
            may spawn on chunkoids within this starsystem type.  Lowest chance of
            black hole spawn (safest to cross during highspeed insterstellar travel).  Lowest
            chunkoid generation of lowest size.  Highest spawn rate of ejecta resources.
    
        SMALLNOVA
            Starsystem formed due to a low-volume supernova.  Chunkoids have tiny-small
            sizes.  Small chunkoids are the smallest of planets having a small maximum
            size but are an order larger than the tiny chunkoids of void space.
            low chance of black hole spawn.  Low chunkoid generation but an order of
            magnitude better than voidspace.  Low---but higher---risk for highspeed
            interstellar travel.

        MODERATENOVA
            Starsystem formed from an average-volume supernova.  Chunkoids have moderate
            maximum sizes and are an order of magnitude above smallnova chunkoids.  Average
            chance of blackhole spawn and average chunkoid generation of average chunkoid
            size.  Moderate risk to highspeed interstellar travel.
    
        HUGENOVA
            Starsystem formed from a huge mass supernova.  Chunkoids have largest sizes and
            highest resource availabilities.  However hugenova starsystems also have highest
            chance of blackhole spawn (most risky for highspeed interstellar travel).  Highest
            and largest chunkoid generation (also a risk to highspeed interstellar travel).
            Lowest spawn rate for ejecta resources.
